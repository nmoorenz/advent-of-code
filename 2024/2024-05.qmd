---
title: "Advent of Code 2024 Day 5"
author: "Nathan Moore"
format: html
editor: visual
---

## --- Day 5: Print Queue ---

Follow the rules for the printing order.

Determine which updates are already in the correct order. What do you get if you add up the middle page number from those correctly-ordered updates?

```{python}

from copy import deepcopy

with open('data-2024-05.txt', 'r') as f:
    inp = f.read().splitlines()

splitter = inp.index('')

orders = inp[:splitter]
updates = inp[splitter+1:]

orders = [x.split('|') for x in orders]
updates = [x.split(',') for x in updates]

# orders
# updates
```

Loop through each of the updates and check that the orders are OK.

```{python}

summer = 0

for u in updates: 
    good = True
    for o in orders: 
        if o[0] in u and o[1] in u: 
            if u.index(o[0]) < u.index(o[1]): 
                # print(o)
                # print('good')
                pass
            else:
                # print('bad')
                good = False
                break
    # print(good)
    # if we get through ok the order of printing ok
    if good: 
        summer += int(u[int(len(u)/2)])
        
summer

# 5208
```

## --- Part Two ---

For the incorrectly ordered updates maybe we can re-order them.

Find the updates which are not in the correct order. What do you get if you add up the middle page numbers after correctly ordering just those updates?

```{python}

summer = 0

for u in updates: 
    good = True
    for o in orders: 
        if o[0] in u and o[1] in u: 
            if u.index(o[0]) > u.index(o[1]): 
                good = False
                # print(u)
                # print(o)
                # create a new list
                u = (u[:u.index(o[1])] 
                       + [o[0]] 
                       + u[u.index(o[1])+1:u.index(o[0])] 
                       + [o[1]] 
                       + u[u.index(o[0])+1:])
    if not good: 
        # get the middle value after making adjustments
        summer += int(u[int(len(u)/2)])
        
summer

# 6463 too low

```

So, I don't want to go through and swap the items, I need to do an ordering algorithm comparing sequential values according to the order list. The alternative is creating a sort order and then looping more simply through each list. As below, the sets are the same, so we can go either way.

```{python}

all_u = set([v for u in updates for v in u])
all_u

all_o = set([p for o in orders for p in o])
all_o

all_o == all_u

```

Attempt 1: create an 'ordered' list from the orders and use that as a key for sorting the updates.

```{python}

list_o = list(all_o)

printer = False

for i in range(0, len(list_o)-1):
    if [list_o[i], list_o[i+1]] not in orders: 
        # swap the order
        list_o[i], list_o[i+1] = list_o[i+1], list_o[i]
        # check backwards
        for j in range(i-1,-1,-1):
            if [list_o[j], list_o[j+1]] not in orders: 
                list_o[j], list_o[j+1] = list_o[j+1], list_o[j]

list_o
```

Let's check the inputs. Something is not right here.

```{python}

left = {}
right = {}

for o in orders: 
    if o[0] in left.keys(): 
        left[o[0]] += 1
    else: 
        left[o[0]] = 1
    if o[1] in right.keys(): 
        right[o[1]] += 1
    else: 
        right[o[1]] = 1
        
left
right
```

Oh.

```{python}

summer = 0

for u in updates: 
    for i in range(len(u)-1): 
        if [u[i], u[i+1]] not in orders: 
            # swap
            pass
            for j in range(i-1,0,-1):
                if [u[j], u[j+1]] not in orders: 
                    # swap
                    pass
    # collect the middle value
    summer += int(u[int(len(u)/2)])
```
